{
  "projectName": "zemonDev-admin",
  "description": "An administrative dashboard for managing the zemonDev platform's content, including users, 'Forge' learning resources, and 'Crucible' problem-solving challenges. It provides CRUD interfaces for all major data models and is intended for use by administrators.",
  "techStack": {
    "backend": {
      "language": "TypeScript",
      "runtime": "Node.js",
      "framework": "Express.js",
      "database": "MongoDB",
      "odm": "Mongoose",
      "authentication": "JWT (jsonwebtoken)",
      "passwordHashing": "bcryptjs",
      "other": [
        "cors",
        "dotenv"
      ]
    },
    "frontend": {
      "language": "TypeScript",
      "framework": "React",
      "buildTool": "Vite",
      "routing": "React Router",
      "stateManagement": "React Context API",
      "styling": "Tailwind CSS with DaisyUI component library",
      "apiClient": "Axios",
      "icons": "Lucide React"
    },
    "devTools": {
      "backend": [
        "nodemon",
        "ts-node"
      ],
      "frontend": [
        "ESLint"
      ]
    }
  },
  "fileStructure": {
    "root": [
      "backend-admin/",
      "frontend-admin/",
      "implementation.md",
      "llms.txt"
    ],
    "backend": "backend-admin/src/ contains api, config, controllers, middleware, models, utils",
    "frontend": "frontend-admin/src/ contains assets, components, contexts, hooks, pages, services"
  },
  "backend": {
    "entryPoint": "backend-admin/src/index.ts",
    "apiPrefix": "/api",
    "port": 5001,
    "authentication": "All routes except for POST /api/auth/login are protected and require admin role. A JWT is expected in the 'Authorization: Bearer <token>' header.",
    "routes": [
      {
        "path": "/auth/login",
        "method": "POST",
        "description": "Authenticates a user and returns a JWT."
      },
      {
        "path": "/users",
        "method": "GET",
        "description": "Retrieves a list of all users."
      },
      {
        "path": "/users/:id",
        "method": "GET, PUT, DELETE",
        "description": "Get, update, or delete a specific user."
      },
      {
        "path": "/forge",
        "method": "GET, POST",
        "description": "Get all 'Forge' resources or create a new one."
      },
      {
        "path": "/forge/:id",
        "method": "GET, PUT, DELETE",
        "description": "Get, update, or delete a specific 'Forge' resource."
      },
      {
        "path": "/crucible",
        "method": "GET, POST",
        "description": "Get all 'Crucible' problems or create a new one."
      },
      {
        "path": "/crucible/dashboard",
        "method": "GET",
        "description": "Get statistics for the crucible dashboard."
      },
      {
        "path": "/crucible/:id",
        "method": "GET, PUT, DELETE",
        "description": "Get, update, or delete a specific 'Crucible' problem."
      },
      {
        "path": "/crucible/:problemId/solutions",
        "method": "GET",
        "description": "Get solutions for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/solutions/:id",
        "method": "GET, PUT",
        "description": "Get or update a specific solution for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/drafts",
        "method": "GET",
        "description": "Get all solution drafts for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/drafts/:id",
        "method": "GET, PUT",
        "description": "Get or update a specific solution draft for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/notes",
        "method": "GET",
        "description": "Get all notes for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/notes/:id",
        "method": "GET",
        "description": "Get a specific note for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/chats",
        "method": "GET",
        "description": "Get all chat sessions for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/chats/:id",
        "method": "GET, PUT",
        "description": "Get or update a specific chat session for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/workspace",
        "method": "GET",
        "description": "Get workspace states for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/workspace/:id",
        "method": "GET",
        "description": "Get a specific workspace state for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/diagrams",
        "method": "GET",
        "description": "Get all diagrams for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/diagrams/:id",
        "method": "GET, DELETE",
        "description": "Get or delete a specific diagram for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/progress",
        "method": "GET",
        "description": "Get progress tracking entries for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/progress/:id",
        "method": "GET",
        "description": "Get a specific progress tracking entry for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/research",
        "method": "GET",
        "description": "Get all research items for a crucible problem."
      },
      {
        "path": "/crucible/:problemId/research/:id",
        "method": "GET, DELETE",
        "description": "Get or delete a specific research item for a crucible problem."
      }
    ],
    "models": {
      "User": {
        "fields": ["email", "password", "fullName", "role"],
        "description": "Represents a user account. Passwords are hashed before saving."
      },
      "ForgeResource": {
        "fields": ["title", "type", "url", "description", "content", "tags", "difficulty", "createdBy", "reviews", "metrics"],
        "description": "Represents a learning resource in the 'Forge'."
      },
      "CrucibleProblem": {
        "fields": ["title", "description", "difficulty", "tags", "requirements", "constraints", "expectedOutcome", "hints", "learningObjectives", "prerequisites", "userPersonas", "resources", "aiHints", "status", "createdBy", "metrics"],
        "description": "Represents a complex problem-solving challenge in the 'Crucible'."
      },
      "AIChatHistory": {
        "fields": ["problemId", "userId", "sessionId", "title", "messages", "tags", "status"],
        "description": "Stores the history of an AI chat session related to a crucible problem."
      },
      "CrucibleDiagram": {
        "fields": ["problemId", "userId", "title", "type", "content", "description"],
        "description": "Stores user-created diagrams (e.g., flowcharts) for a crucible problem."
      },
      "CrucibleNote": {
        "fields": ["problemId", "userId", "content", "tags", "visibility", "lastSaved"],
        "description": "Stores user notes for a crucible problem."
      },
      "CrucibleSolution": {
        "fields": ["problemId", "userId", "content", "status", "aiAnalysis", "reviews", "metrics"],
        "description": "Represents a user's submitted solution to a crucible problem."
      },
      "ProgressTracking": {
        "fields": ["problemId", "userId", "timeSpent", "milestones", "status", "startedAt", "completedAt"],
        "description": "Tracks a user's progress through a crucible problem, including milestones and time spent."
      },
      "ResearchItem": {
        "fields": ["problemId", "userId", "title", "type", "content", "url", "tags"],
        "description": "Stores research items (links, notes, etc.) collected by a user for a crucible problem."
      },
      "SolutionDraft": {
        "fields": ["problemId", "userId", "content", "versions", "status", "lastSaved"],
        "description": "Saves drafts of a user's solution, with versioning."
      },
      "WorkspaceState": {
        "fields": ["problemId", "userId", "layout", "activeContent", "currentMode", "editorSettings"],
        "description": "Saves the state of a user's workspace UI for a specific crucible problem."
      }
    }
  },
  "frontend": {
    "entryPoint": "frontend-admin/src/main.tsx",
    "mainComponent": "frontend-admin/src/App.tsx",
    "apiClient": {
      "file": "frontend-admin/src/services/api.ts",
      "baseURL": "http://localhost:5001/api",
      "authentication": "An Axios interceptor attaches the JWT from localStorage to every outgoing request."
    },
    "routing": {
      "library": "React Router",
      "paths": [
        {
          "path": "/login",
          "component": "SignInPage",
          "description": "Public route for user login."
        },
        {
          "path": "/admin/*",
          "component": "ProtectedRoute",
          "description": "Wraps all administrative pages, checking for authentication."
        },
        {
          "path": "/admin/dashboard",
          "component": "DashboardPage",
          "description": "Main landing page after login."
        },
        {
          "path": "/admin/users",
          "component": "UserListPage",
          "description": "Displays a list of all users."
        },
        {
          "path": "/admin/forge",
          "component": "ForgeListPage",
          "description": "CRUD interface for 'Forge' resources."
        },
        {
          "path": "/admin/crucible",
          "component": "CrucibleListPage",
          "description": "CRUD interface for 'Crucible' problems."
        }
      ]
    }
  },
  "userFlow": [
    "User navigates to the web application.",
    "If not authenticated, the user is redirected to the '/login' page.",
    "User enters admin credentials and submits the form.",
    "A POST request is sent to the backend's '/api/auth/login' endpoint.",
    "On successful authentication, a JWT is returned and stored in the browser's localStorage.",
    "The user is redirected to the '/admin/dashboard' page.",
    "The application layout, including a navigation sidebar, is displayed.",
    "The user can use the sidebar to navigate to different sections: Users, Forge, or Crucible.",
    "Each section provides a list view and options to create, edit, and delete items.",
    "All API requests to the backend from the admin section are authenticated using the stored JWT."
  ]
} 